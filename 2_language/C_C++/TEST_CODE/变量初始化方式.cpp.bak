//说明：下面列举了常规变量引用类的初始化方式后的几种情形
//必须使用支持C++11的编译器
#include<iostream>//头文件只能写在文件开头，不能在函数内或者是在函数外后面其它地访
//因为要对头文件中包含的内容进行提前声明
int main(void)
{
	class lei//在函数内声明一个局部类，其它函数中用不了
	{
	public:
		lei(int i){num=i;}
		int num;
	};

	using  std::cin;//在main函数声明，表明只在main函数内这样使用
	using  std::cout;
	using std::endl;
	cout<<"-----------------------------------------------------------"<<endl;
	{cout<<"普通变量初始化:"<<endl;
		long long a=2013ll;//后面的ll表明它是一个long long 类型的数值
		//虽然编译器可以自动进行类型转换，具体写明数据类型可以更加清晰
		long long b(2014LL);
		long long c={2015LL};
		//long long d({2016LL});//这样初始化编译出错
		long long d{2016LL};
		long long ref(2000);
		long long e{ref};
		cout<<a<<endl
			<<b<<endl
			<<c<<endl
			<<d<<endl
			<<e<<endl;
	}
	cout<<"-----------------------------------------------------------"<<endl;
	{cout<<"char类型初始化:"<<endl;
			int x = 66;
		char c1 {31325}; // narrowing, not allowed，编译不会出错，只会产生warning
		char c2 = {66}; // allowed because char can hold 66,正常输出字符'B'
		char c4 = {x};//编译不会出错，只会产生warning,正常输出字符'B'
		//使用list-initialization{ }中的值可以不是const，类与普通变量均是如此
		//（这一点不同于教程《C++ Primer Plus》P105示例代码中的说法）
		cout<<c1<<endl
		<<c2<<endl
		<<c4<<endl;
	}
	cout<<"-----------------------------------------------------------"<<endl;
	{
		cout<<"单个类对象的初始化方式与普通变量一样:"<<endl;
		//lei cla0;//编译出错，没有默认的构造函数
		lei cla=1L;//默认的构造函数会进行转化，即把1转化为一个对象
		lei clb(2L);//用1进行初始化
		cout<<cla.num<<" "<<clb.num<<endl;
		lei init(13L);
		lei clc=init;
		lei cld(init);
		lei cle{init};
		cout<<clc.num<<" "<<cld.num<<" "<<cle.num<<endl;
	}
	cout<<"-----------------------------------------------------------"<<endl;
	{
		cout<<"内置类型也可以类构造函数一样使用:"<<endl;
		int a(1);cout<<a<<endl;//初始化等价于下行
		int b=int(11);cout<<b<<endl;
		int c=int();cout<<c<<endl;//会被初始化为0；相当于调用默认构造函数
		int d;cout<<d<<endl;//d是乱码

		//int*e=(int*)();//指针类型没有构造函数，就好像类对象指针为类型也没有构造函数一样
	}
	return 0;
}