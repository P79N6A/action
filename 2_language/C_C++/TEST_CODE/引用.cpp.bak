//1函数形参为非const引用，实参不能为右值的原因是：设计者的意图可能是改变原有变量的值
//但是为右值时，函数的引用相当于对临时变量的引用，也就达不到改变变量值的目的。但如
//果加引用是仅为了值传递而提高运算速度，那么加const就是标明只是为了值传递而不是改变
//原变量值，即使是临时变量也无所谓，参见《C++ Primer Plus》P393
//如果函数返回类型是引用，那么函数在被使用的同时可以作为左值使用，如果不让其作为左
//值，可以将函数返回类型声明为const（表示函数不能作为左值，但是原变量还是可以改变的
//并不因为const不能变了）
//2引用必须在定义时初始化，而不声明后再赋值。
//3在类中定义引用时，（一）不能将几个引用类型连着写，如果要连着写，一所有变量前加&就可以，二，可以用typedef int& intref;在前面先定义类型，再在后面连着写。见下面测试例子class A（指针同理）；（二）类中定义引用时，不能使用默认的赋值运算符，因为默认的编译器只是照猫画虎进行平铺，但是这个引用可能是类外的某个变量,如果类中的引用都是类内成员，也不能使用默认的赋值运算符，因为引用对象已经发生改变；（三）必须delete掉默认的复制构造函数，或者自己定义默认的复制构造函数，否则引用不会在复制构造的同时绑定到实际值。总之，一旦类中有引用成员，那么如同动态分配内存一样，构造函数，复制构造函数，所有构造函数，赋值运算符，都要自己重新定义，或使用关键字delete，把它屏蔽掉。
#include<iostream>
using namespace std;
void swap1(double &a,double&b)//不能使用swap进行测试，因为标准库中有一个函数是swap重载了
//很多类型
{
	b=a+b;
	a=b-a;
	b=b-a;
}
const int& fun1(int &in)
{
	return in;
}
template<typename T>
void fun2(T a)
{
	a=135;
}
//----------------------------------------------------------------------
class A
{
public:
	A():b(a[0]),c(a[1]),d(a[2]){e=3;f=3.2;}
	int a[5];
	int& b,c,d;//这样连写只有b是引用类型，而c,d是普通int类型；
	//int &b,&c,&d;//连着写方式一
	typedef int& intref;
	intref bb,cc,dd;//连着写方式二

	int* h,i,j,k;
	//int *h,*i,*j,*k;
	typedef int* intPtr;
	intPtr hh,ii,jj,kk;

	double e,f;
};
int main()
{
	cout<<endl<<"-----------------------------------"<<endl;
	{
		double c=3.14,d=2.7;
		swap1(c,d);
		cout<<"c:"<<c<<"d:"<<d<<endl;
		int a=3,b=4;
		//swap1(a,b);//编译出错:error C2664: “swap1”: 不能将参数 1 从“int”转换为“double &”
		//把swap1中的形参类型用const修饰就正确编译，但是改变了换值的初衷，因为const类型
		//不能改变其值
		cout<<"a:"<<a<<"b"<<b<<endl;
	}
	cout<<endl<<"-----------------------------------"<<endl;
	{
		int a=100,b;
		//fun1(a)=10;//编译出错： error C3892: “a”: 不能给常量赋值
		b=fun1(a);
		cout<<b<<endl;
	}
	cout<<endl<<"-----------------------------------"<<endl;
	cout<<"=>类中定义引用时变量不能连写，否则只有第一个被成功定义，后面均是普通变量"<<endl;
	{
		A x;
		x.a[0]=1;
		cout<<x.b<<endl;
		x.a[1]=2;
		cout<<x.c<<endl;//未成功定义引用，输出的是乱码
	}
	return 0;
}